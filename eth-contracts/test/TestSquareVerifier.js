// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
var verifier = artifacts.require('Verifier');

let user;
let { proof, inputs } = require("./proof_right");

contract('Verifier', async accounts => {
    user = accounts[0];
})

it('Verificating with the right proof', async () => {
    var verifierContract = await verifier.deployed()
    let proof_result = await verifierContract.verifyTx.call(
        proof.a,
        proof.b,
        proof.c,
        inputs,
        {from: user}
    );
    assert.equal(true, proof_result, "Verifier not working");
})

it('Verificating with the right proof', async () => {
    var verifierContract = await verifier.deployed()
    let proof_result = await verifierContract.verifyTx.call(
        proof.a,
        proof.b,
        proof.c,
        [2, 20],
        {from: user}
    );
assert.equal(false, proof_result, "Verifier not working");
})

// Test verification with correct proof
// - use the contents from proof.json generated from zokrates steps


// Test verification with incorrect proof

